#!/bin/bash
##
# Terminator: backup and maintenance system for servers
# Copyright 2016 Tim Kennell Jr.
# Licensed under the MIT License (http://opensource.org/licenses/MIT)
##

# ------------ #
# System Check #
# ------------ #

# Create log directory if not exists
if ! [[ -d log ]] ; then
	mkdir log
fi

# Set up log file
log_file=log/$HOSTNAME.$(date +"%F_%R").log
touch "$log_file"

# Check for terminator.conf file
if ! [[ -f terminator.conf ]] ; then
	echo "# System check" >> "$log_file"
	echo "E: could not find 'terminator.conf'.  Please run 'setup'" >> \
		"$log_file"

	exit 1
fi

# Load in user configurations
. ./terminator.conf

error_flag=0
email_body="List of errors during system maintenance\n"


# ----------------- #
# Automagic Updates #
# ----------------- #

# Update
# echo "updating"
echo "# aptitude update" >> "$log_file"
aptitude update &>> "$log_file"
echo >> "$log_file"

# Upgrade
# echo "upgrading"
echo "# aptitude full-upgrade" >> "$log_file"
aptitude -y full-upgrade &>> "$log_file"
echo >> "$log_file"

# Clean
# echo "cleaning"
echo "# aptitude clean" >> "$log_file"
aptitude -y clean &>> "$log_file"
echo >> "$log_file"

# If errors with update and upgrade, set error_flag for email and add error to 
#     email body
if grep -q 'E: \|W: ' "$log_file" ; then
	error_flag=1
	email_body+=" - System update and upgrade\n"
fi


# --------------- #
# Database Backup #
# --------------- #

# Set default database backup directory to current location if not set in
#     terminator.conf
[[ -z "$local_host_backup_dir" ]] && local_host_backup_dir="$(pwd)"


# Determines if more than a daily backup is necessary based on current date and 
#     presence previous backup for that time frame
# param Boolean $1 -- backup for time frame necessary
# param Date $2 -- known date for backup at time frame based on current date
# param Dir $3 -- directory storing backups for time frame
## Ex: 
### 
### 
scheduled_backup() {
	recent_backup_date=$(ls -alFtr --full-time $3 | awk 'FNR == 2 {print $6}')


}

curate_backup_dir() {

}

# Only attempt database backup if database credentials in terminator.conf
if [[ -n "$local_host_db_user" ]] && [[ -n "$local_host_db_pass" ]] ; then

	# Database backup directory structure list
	db_backup_dir_str=(
		"backups/mysqldump/daily"
		"backups/mysqldump/weekly"
		"backups/mysqldump/monthly"
		"backups/mysqldump/yearly"
	)

	# Create directory structure
	for dir in "${db_backup_dir_str[@]}" ; do
		if ! [[ -d "$local_host_backup_dir/$dir" ]] ; then
			mkdir -p "$local_host_backup_dir/$dir"
		fi
	done

	# File used for backup
	db_backup_file="$local_host_backup_dir/backups/mysqldump/daily/"
	db_backup_file+="$HOSTNAME.mysqldump.$(date +"%F_%T").sql"

	# run backup
	echo "# mysqldump" >> "$log_file"
	# mysqldump -u "$local_host_db_user" -p"$local_host_db_pass" --all-databases \
	# 	1> "$db_backup_file" 2>> "$log_file"
	mysqldump -u "$local_host_db_user" -p"burp" --all-databases \
		1> "$db_backup_file" 2>> "$log_file"
	echo >> "$log_file"

	# If errors with database backup, set error_flag for email and add error 
	#     to email body
	# Delete empty database backup file
	if grep -q 'mysqldump: ' "$log_file" ; then
		error_flag=1
		email_body+=" - Database backup\n"
		rm "$db_backup_file"
	fi

	# If db_backup_file exists, no errors
	if [[ -f "$db_backup_file" ]] ; then
		# TODO:  copy to appropriate directories
		
	fi


fi


# ------------------------- #
# Rsync with External Hosts #
# ------------------------- #



# ------------------ #
# Admin Error Emails #
# ------------------ #

# If errors and admin emails set, send email of error status
if [[ -n "$mailto" ]] && [[ "$error_flag" == 1 ]] ; then
	echo -e "$email_body" |
	mutt -e "set from=terminator@$HOSTNAME.server realname='$HOSTNAME'" \
		-s "$HOSTNAME System Maintenance Errors" \
		-a "$log_file" -- "$mailto"
fi