#!/bin/bash
##
# Terminator: backup and maintenance system for servers
# Copyright 2016 Tim Kennell Jr.
# Licensed under the MIT License (http://opensource.org/licenses/MIT)
##

# -------------- #
# User Responses #
# -------------- #

# Detects "y", "n", "yes", and "no" user response in a case-insensitive manner
# param String $1
## Ex: yes_response "y" --> returns 0
## Ex: yes_response "yes" --> returns 0
## Ex: yes_response "n" --> returns 0
## Ex: yes_response "no" --> returns 0
## Ex: yes_response "" --> returns 1
## Ex: yes_response "gobble de guk" --> returns 1
yes_no_response() {
	if [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = y ]] \
		|| [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = yes ]] \
		|| [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = n ]] \
		|| [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = no ]] ; then

		return 0
	else
		return 1
	fi
}

# Detect "y" or "yes" response as affirmative answer in case-insensitive manner
# param String $1
## Ex: yes_response "yes" --> returns 0
## Ex: yes_response "no" --> returns 1
## Ex: yes_response "gobble de guk" --> returns 1
yes_response() {
	if [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = y ]] \
		|| [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = yes ]] ; then

		return 0
	else
		return 1
	fi
}

# Detect "n" or "no" response as affirmative answer in case-insensitive manner
# param String $1
## Ex: no_response "no" --> returns 0
## Ex: no_response "yes" --> returns 1
## Ex: no_response "gobble de guk" --> returns 1
no_response() {
	if [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = n ]] \
		|| [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = no ]] ; then

		return 0
	else
		return 1
	fi
}


# ------------- #
# Initial Setup #
# ------------- #

cp terminator.conf.default terminator.conf

# Current location to know where to run script
# Writes to terminator script for cron job
install_location=$(pwd)
sed -i -r 's|(install_location=).*|\1'"$install_location"'|g' terminator

echo

# --------------------- #
# Schedule and cron job #
# --------------------- #

# Demarcate install date for backup schedule
install_date=$(date +"%F")
sed -i -r 's|(backup_start=)|\1'"$install_date"'|g' terminator.conf

# Request time to run system maintenance at until user gives valid response
# Set initial value of variable to "nonsense" so that while loop runs
cron_date=nonsense
while ! date -d "$cron_date" &> /dev/null ; do
	read -p "Time to run system maintenance [12:00 AM]: " cron_date

	if ! date -d "$cron_date" &> /dev/null ; then
		echo -en "\nI'm sorry, I didn't understand your response."
		echo -e "\nPlease enter a time in the format HH:MM (AM/PM)"
	fi
done

# Retrieve minutes and hours from user response for cron job
cron_min=$(date -d "$cron_date" +"%M")
cron_hour=$(date -d "$cron_date" +"%H")

# Initial comment as header for cron job file
cron_file_contents="# terminator system maintenance script cron job\n"
cron_file_contents+="# Runs every day at user specificied time\n"
cron_file_contents+="# Installs updates, backs up MySQL databases, and backs "
cron_file_contents+="up system\n"

cron_file_contents+="# Exports backups to on-site and off-site locations at "
cron_file_contents+="user request\n\n"

# Set PATH variable for external programs
cron_file_contents+="# Set PATH variable for external programs\n"
cron_file_contents+="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:"
cron_file_contents+="/sbin:/bin\n\n"

# Cron job parameters
cron_file_contents+="# Run terminator system maintenance at user specified "
cron_file_contents+="time\n"

cron_file_contents+="$cron_min $cron_hour * * * root $install_location/"
cron_file_contents+="terminator\n"

# Place file into cron location
sudo echo -e "$cron_file_contents" > /etc/cron.d/terminator

echo

# ---------------------- #
# Mail Utilities Install #
# ---------------------- #

install_mail() {
	while ! yes_no_response "$install_mail_response" ; do

		read -p "Install a mail client (y/n): " install_mail_response

		if ! yes_no_response "$install_mail_response" ; then
			echo -en "\nI'm sorry, I didn't understand your response.  "
			echo -e "Please type \"y\" or \"n\""
		fi
	done

	if yes_response "$install_mail_response" ; then
		sudo apt-get update
		sudo apt-get install -y mailutils mutt
	fi
}

# Check for "mailutils" by checking for mail and postfix and check for mutt
#     (mail utility software)
# Request to install if not already installed
# Note that this requires an account with admin privileges but no need to be
#     root when running file
if ! which mail > /dev/null \
	|| ! which postfix > /dev/null \
	|| ! which mutt > /dev/null ; then

	install_mail
fi


# ------------ #
# Admin Emails #
# ------------ #

setup_admin_email() {
	email_regex=[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,63}
	admin_email=nonsense

	# First email address to test
	while [[ -n "$admin_email" ]] && ! [[ "$admin_email" =~ $email_regex ]] ; do
		read -p "Admin email to notify for fatal errors []: " admin_email

		if [[ -n "$admin_email" ]] \
			&& ! [[ "$admin_email" =~ $email_regex ]] ; then

			echo -e "\nI'm sorry, I didn't understand your response."
			echo -en "Please enter an email address in the format "
			echo -e "user@domain.tld"
		fi
	done

	# Allow user to put in additional email addresses
	if [[ -n "$admin_email" ]] ; then
		user_response=nonsense

		while [[ -n "$user_response" ]] && ! no_response "$user_response" ; do
			read -p "Other admin email to notify for fatal errors []: " \
				user_response

			if [[ -n "$user_response" ]] \
				&& ! [[ "$user_response" =~ $email_regex ]] ; then
				
				echo -e "\nI'm sorry, I didn't understand your response.  "
				echo -en "\nPlease enter an email address in the format "
				echo -e "user@domain.tld"

			elif [[ -n "$user_response" ]] && ! no_response "$user_response"
				then

				admin_email+=",$user_response"
			fi
		done

		# Write value to terminator.conf
		sed -i -r 's|(mailto=)|\1'"$admin_email"'|g' terminator.conf

		# Send test email to check system
		echo -e "This is a test email from $HOSTNAME to validate system emails"\
		| mutt -e "set from=terminator@$HOSTNAME.server realname=$HOSTNAME" \
			-s "$HOSTNAME System Test Email" -- "$admin_email"

		echo
		echo -e "I sent a test email to the selected accounts."
		echo -e "Please note that the emails are probably in the spam folder."
	fi

	echo
}

# Check for "mailutils" by checking for mail and postfix and check for mutt
#     (mail utility software)
# Request to setup admin emails if installed
if  which mail > /dev/null \
	&& which postfix > /dev/null \
	&& which mutt > /dev/null ; then

	setup_admin_email
fi


# ---------------- #
# SSH key creation #
# ---------------- #

# Create specified directory for SSH keys and move keys to folder for 
#     organization (create dir if not exists)
# param Dir $1
# param File $2
## Ex: mv_key my.key --> mv my.key ssh_keys; mv my.key.pub ssh_keys
mv_key() {
	# create folder to contain key
	if ! [[ -d ssh_keys ]] ; then
		mkdir "$1"
	fi

	# move private and public key to folder
	mv "$2" "$1"
	mv "$2.pub" "$1"
}

# Create a 4096 bit ssh key with no passphrase using provided name ($1) and
#     store in ssh_keys folder for organization
# param String $1
## Ex: create_key "on_site_host" --> ssh_keys/terminator.on_site_host.key,
##     ssh_keys/terminator.on_site_host.key.pub
create_key() {
	# Reset user response on each function call
	local create_key_response

	# Read user input for creating on-site key until user gives valid response
	while ! yes_no_response "$create_key_response" ; do

		read -p "Create an $1 ssh key (y/n): " create_key_response

		if ! yes_no_response "$create_key_response" ; then
			echo -en "\nI'm sorry, I didn't understand your response.  "
			echo -e "Please type \"y\" or \"n\""
		fi
	done

	# Create on-site key if "y" or "yes"
	if yes_response "$create_key_response" ; then
		key_name="$HOSTNAME.terminator.$1.key"
		key_dir="ssh_keys"
		echo "$key_dir$key_name"

		# create key
		ssh-keygen -b 4096 -N '' -f "$key_name" -C "$key_name"

		# Move key to folder for organization
		mv_key "$key_dir" "$key_name"

		# set variable in terminator.conf with key file
		sed -i -r 's|('"$1"'=).*|\1'"$install_location/$key_dir/$key_name"'|g' \
			terminator.conf
	fi
}

# see terminator.conf for key names
create_key "on_site_host_ssh_key"
create_key "off_site_host_ssh_key"
